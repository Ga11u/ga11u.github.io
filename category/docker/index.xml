<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker | Marc Page</title>
    <link>https://ga11u.github.io/category/docker/</link>
      <atom:link href="https://ga11u.github.io/category/docker/index.xml" rel="self" type="application/rss+xml" />
    <description>Docker</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 31 Aug 2020 14:40:20 +0200</lastBuildDate>
    <image>
      <url>https://ga11u.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Docker</title>
      <link>https://ga11u.github.io/category/docker/</link>
    </image>
    
    <item>
      <title>Deploying in Docker Swarm From a Private Repository</title>
      <link>https://ga11u.github.io/post/swarm-deploying-from-private-repo/</link>
      <pubDate>Mon, 31 Aug 2020 14:40:20 +0200</pubDate>
      <guid>https://ga11u.github.io/post/swarm-deploying-from-private-repo/</guid>
      <description>&lt;p&gt;By default Docker Swarm pull images from Docker Hub, but sometimes we want to have our own private repositories and private images. Then, a few things have to be changed to allow it.&lt;/p&gt;
&lt;p&gt;In this guide, I will show you how to do it, by using the example of GitLab repositories.&lt;/p&gt;
&lt;p&gt;Lets assume that we have our private images in GitLab and we have already deployed a swarm stack called &lt;code&gt;example-project&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first thing you need to do is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker login &amp;lt;gitlab-url&amp;gt;:&amp;lt;repository-port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need to check the port with your GitLab or repository provider, a common used port in GitLab is 4567.&lt;/p&gt;
&lt;p&gt;Then you will be asked to provide your &lt;code&gt;username&lt;/code&gt; and password. The &lt;code&gt;password&lt;/code&gt; is often a token or a secure key you have created only for accessing to your private repository.&lt;/p&gt;
&lt;p&gt;Finnaly, you can deploy your stack as always by adding the option &lt;code&gt;--with-registry-auth&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stack deploy -c docker-compose.yml example-project --with-registry-auth
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Updating Doker Containers Without Downtime</title>
      <link>https://ga11u.github.io/post/updating-doker-containers-without-downtime/</link>
      <pubDate>Mon, 31 Aug 2020 12:26:20 +0200</pubDate>
      <guid>https://ga11u.github.io/post/updating-doker-containers-without-downtime/</guid>
      <description>&lt;p&gt;Updating a running container may be a critical task if not done properly, as it can cause undesired side effects or stop production processes. Thus, with this guide I want to show you how to conduct a conteiner update process in an easy and safe way.&lt;/p&gt;
&lt;p&gt;I assume you are using a container deployment and managment tool such as Swarm or Kubernates, otherwise I strongly recommend you to get familar with such kind of tools and use it on your applications. For the rest of this guide, I will use Swarm as a example.&lt;/p&gt;
&lt;p&gt;Lets imagine that we have the following service definition in a &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:
  cassandra1:
    &amp;lt;&amp;lt;: *cassandra-base
    environment:
      CASSANDRA_CLUSTER_NAME: cassandra-cluster
      CASSANDRA_PASSWORD: cassandra
      CASSANDRA_BROADCAST_ADDRESS: tasks.cassandra1
      CASSANDRA_LISTEN_ADDRESS: tasks.cassandra1
      CASSANDRA_SEEDS: &amp;quot;tasks.cassandra1,tasks.cassandra2,tasks.cassandra3&amp;quot; 
      CASSANDRA_PASSWORD_SEEDER: &amp;quot;yes&amp;quot;
    ports:
      - target: 7000
        published: 7000
      - target: 9042
        published: 9042
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This service creates an Apache Cassandra node which is connected in a cluster to other 2 nodes, making a cluster of 3 nodes. It also opens the ports 7000 and 9042.&lt;/p&gt;
&lt;p&gt;Now, we run &lt;code&gt;docker stack deploy -c docker-compose.yml example_project&lt;/code&gt; and our cluster of 3 nodes is succesfuly running and working. So far, so god!&lt;/p&gt;
&lt;p&gt;However, after a while we realise that we have forgoten to open the port 7199 from where we can connect with &lt;code&gt;nodetols&lt;/code&gt; tool to manage our cluster and get some statistics. &lt;em&gt;So what can we do now?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy, (1) update the &lt;code&gt;docker-compose.yml&lt;/code&gt; as we wish, e.g., with the port 7199:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:
  cassandra1:
    &amp;lt;&amp;lt;: *cassandra-base
    environment:
      CASSANDRA_CLUSTER_NAME: cassandra-cluster
      CASSANDRA_PASSWORD: cassandra
      CASSANDRA_BROADCAST_ADDRESS: tasks.cassandra1
      CASSANDRA_LISTEN_ADDRESS: tasks.cassandra1
      CASSANDRA_SEEDS: &amp;quot;tasks.cassandra1,tasks.cassandra2,tasks.cassandra3&amp;quot; 
      CASSANDRA_PASSWORD_SEEDER: &amp;quot;yes&amp;quot;
    ports:
      - target: 7000
        published: 7000
      - target: 9042
        published: 9042
      - target: 7199
        published: 7199
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2) Run again the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stack deploy -c docker-compose.yml example_project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that way the Docker Swarm will create a new version of our service and stop old version after that.&lt;/p&gt;
&lt;p&gt;Finally, if everything has worked fine, we should be able to do something like this &lt;code&gt;nodetool tablestats -h &amp;lt;CASSANDRA_NODE_IP&amp;gt;&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
